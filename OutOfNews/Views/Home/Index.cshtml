@using OutOfNews.Models
@using Microsoft.AspNetCore.Identity
@model List<OutOfNews.Models.Article>
@inject UserManager<User> _userManager

@{
    ViewData["Title"] = "Home Page";
}

<h2>Articles:
@if (Model.Count <= 0)
{
    @:Empty...
}
else
{
    @Model.Count.ToString()
}
</h2>

@foreach (var article in Model)
{
    var user = await _userManager.FindByIdAsync(article.AuthorId);
    <div class="align-content-center container request-box">
        <div class="container-fluid request-sender">
            <b>Author:</b>
            «@(user.GetNameToShow() ?? "unknown user")»
        </div>
        <div class="container-fluid request-field">
            <b>Tags: </b>
            @foreach (var tag in article.Tags)
            {
                @*Filtered articles by tags*@
                <a href="#">
                    <p class="d-inline-block font-weight-bold">#@tag</p>
                </a>
            }
        </div>
        <div class="container-fluid request-field">
            <p class="h6"><b>Created:</b> @(article.CreatedAt.ToString())</p>
            @if (!string.IsNullOrEmpty(article.Location))
            {
                <p class="h6"><b>At:</b> @(article.Location)</p>
            }
        </div>
        <div class="container-fluid request-field">
            <markdown>@article.Heading</markdown>
        </div>
        <div class="container-fluid request-field">
            <markdown>@article.ShortDescription</markdown>
        </div>
    </div>
}

