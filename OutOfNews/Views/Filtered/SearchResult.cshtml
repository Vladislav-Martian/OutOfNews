@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Routing
@using Microsoft.Extensions.Configuration
@using OutOfNews.Extensions

@inject IConfiguration Configuration
@inject UserManager<User> _userManager

@model PaginatedItemsViewModel<Article>

@{
    ViewBag.Title = "Search result";
    
    var allows = (User.Identity?.IsAuthenticated ?? false) && User.GetLoggedInUser(_userManager)
        .IsAdult(int.Parse(Configuration["Restrictions:NSFWAge"]),
                    bool.Parse(Configuration["Restrictions:UnauthorizedAdult"]));
}

<h2>Search results:</h2>
<hr/>

@*NSFW button*@
@if (allows)
{
    <div class="d-flex w-25 position-absolute float-left l-10">
        
        @if (Context.Request.Cookies.ContainsKey("nsfw-allow") 
             && Context.Request.Cookies["nsfw-allow"] == "true")
        {
            <input type="checkbox" class="d-inline-block mr-2 toggle" id="nsfw-toggle" checked>
        }
        else
        {
            <input type="checkbox" class="d-inline-block mr-2 toggle" id="nsfw-toggle">
        }
        <span class="h3 d-inline-block"> NSFW </span>
    </div>
}


<div class="d-flex p-0">
    <div class="d-inline-block pagination prev w-20">
        @if (Model.HasPreviousPage)
        {
            <a asp-action="Tagged" asp-route-tag="@(Context.GetRouteValue("tag")?.ToString())" asp-route-id="@(Model.Page - 1)" class="h3 d-inline-block pagination-link">Previous page</a>
        }
    </div>
    <div class="d-inline-block pagination w-30 h3">
        Page: @Model.Page.ToString()
    </div>
    <div class="d-inline-block pagination w-30 h3">
        From: @Model.TotalPages.ToString()
    </div>
    <div class="d-inline-block pagination next w-20">
        @if (Model.HasNextPage)
        {
            <a asp-action="Tagged" asp-route-tag="@(Context.GetRouteValue("tag")?.ToString())" asp-route-id="@(Model.Page + 1)" class="h3 d-inline-block pagination-link">Next page</a>
        }
    </div>
</div>

@{
    List<Article> articles;
    if (Context.Request.Cookies.ContainsKey("nsfw-allow")
        && Context.Request.Cookies["nsfw-allow"] == "true")
    {
        articles = Model.GetItems();
    }
    else
    {
        articles = Model.GetItems(c => 
            c.Where(a => !a.Nsfw));
    }
    
}

@foreach (var article in articles)
{
    var user = await _userManager.FindByIdAsync(article.AuthorId);
    @(await Html.PartialAsync("ArticlePartial", (article, user)))
}

<div class="d-flex p-0">
    <div class="d-inline-block pagination prev w-20">
        @if (Model.HasPreviousPage)
        {
            <a asp-action="Tagged" asp-route-tag="@(Context.GetRouteValue("tag")?.ToString())" asp-route-id="@(Model.Page - 1)" class="h3 d-inline-block pagination-link">Previous page</a>
        }
    </div>
    <div class="d-inline-block pagination w-30 h3">
        Page: @Model.Page.ToString()
    </div>
    <div class="d-inline-block pagination w-30 h3">
        From: @Model.TotalPages.ToString()
    </div>
    <div class="d-inline-block pagination next w-20">
        @if (Model.HasNextPage)
        {
            <a asp-action="Tagged" asp-route-tag="@(Context.GetRouteValue("tag")?.ToString())" asp-route-id="@(Model.Page + 1)" class="h3 d-inline-block pagination-link">Next page</a>
        }
    </div>
</div>
